---
export interface Props {
  currentZone?: string;
}

const { currentZone = '/' } = Astro.props;
---

<div id="nut-bar" class="fixed bottom-0 left-0 right-0 bg-black/80 backdrop-blur-lg border-t border-gray-600 z-40">
  <div class="container mx-auto px-4">
    <div class="flex items-center gap-3 py-3">
      <!-- Type Selector Buttons -->
      <div class="flex gap-1">
        <button 
          data-type="note"
          class="nut-type-btn px-3 py-2 rounded-lg bg-gray-800 hover:bg-gray-700 transition text-sm"
          aria-label="Note"
        >
          📝
        </button>
        <button 
          data-type="urge"
          class="nut-type-btn px-3 py-2 rounded-lg bg-gray-800 hover:bg-gray-700 transition text-sm"
          aria-label="Urge"
        >
          💭
        </button>
        <button 
          data-type="task"
          class="nut-type-btn px-3 py-2 rounded-lg bg-gray-800 hover:bg-gray-700 transition text-sm"
          aria-label="Task"
        >
          ✅
        </button>
      </div>

      <!-- Input Field -->
      <input 
        type="text"
        id="nut-input"
        placeholder="What's happening?"
        class="flex-1 bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 focus:outline-none focus:border-gray-500 transition placeholder-gray-500"
      />

      <!-- Capture Button -->
      <button 
        id="nut-capture-btn"
        class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition font-medium text-sm"
      >
        Capture
      </button>
    </div>
  </div>
</div>

<!-- Toast Container -->
<div id="toast-container" class="fixed top-4 right-4 z-50"></div>

<style>
  .nut-type-btn.active {
    @apply bg-blue-600 hover:bg-blue-500;
  }
  
  .nut-type-btn[data-type="note"].active {
    @apply bg-blue-600;
  }
  
  .nut-type-btn[data-type="urge"].active {
    @apply bg-purple-600;
  }
  
  .nut-type-btn[data-type="task"].active {
    @apply bg-green-600;
  }

  .toast {
    @apply bg-gray-800 border border-gray-600 rounded-lg px-4 py-3 shadow-lg;
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
</style>

<script>
  // Get elements
  const input = document.getElementById('nut-input') as HTMLInputElement;
  const captureBtn = document.getElementById('nut-capture-btn');
  const typeButtons = document.querySelectorAll('.nut-type-btn');
  const toastContainer = document.getElementById('toast-container');
  
  // Track selected type
  let selectedType: 'note' | 'urge' | 'task' = 'note';
  
  // Set initial active button
  typeButtons[0].classList.add('active');
  
  // Type button click handlers
  typeButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      // Remove active from all
      typeButtons.forEach(b => b.classList.remove('active'));
      // Add active to clicked
      btn.classList.add('active');
      // Update selected type
      selectedType = btn.getAttribute('data-type') as 'note' | 'urge' | 'task';
    });
  });
  
  // Show toast notification
  function showToast(message: string) {
    const toast = document.createElement('div');
    toast.className = 'toast text-white';
    toast.textContent = message;
    toastContainer?.appendChild(toast);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
      toast.style.animation = 'slideOut 0.3s ease-out';
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }
  
  // Capture NUT function
  function captureNUT() {
    const content = input.value.trim();
    
    if (!content) {
      showToast('Please enter some content');
      return;
    }
    
    // Create NUT object
    const nut = {
      id: Date.now().toString(),
      type: selectedType,
      content: content,
      timestamp: new Date().toISOString(),
      status: 'unassigned',
      zones: []
    };
    
    // Get existing NUTs from localStorage
    const existingNuts = JSON.parse(localStorage.getItem('nuts') || '[]');
    
    // Add new NUT
    existingNuts.push(nut);
    
    // Save to localStorage
    localStorage.setItem('nuts', JSON.stringify(existingNuts));
    
    // Clear input
    input.value = '';
    
    // Show success toast
    const typeEmoji = {
      note: '📝',
      urge: '💭', 
      task: '✅'
    };
    showToast(`${typeEmoji[selectedType]} NUT captured!`);
  }
  
  // Capture button click
  captureBtn?.addEventListener('click', captureNUT);
  
  // Enter key to capture
  input?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      captureNUT();
    } else if (e.key === 'Escape') {
      input.value = '';
    }
  });
  
  // Focus input on page load
  setTimeout(() => input?.focus(), 100);
</script>